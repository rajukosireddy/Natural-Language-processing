# -*- coding: utf-8 -*-
"""nlp-4

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1TkaNwGO7DIimVSTxSEF6mQhcUj9zPhg8
"""

This code analyzes the morphology of sentences using the spaCy library. Let's break down the code:

1. `import spacy`: Imports the spaCy library, which is used for natural language processing tasks.

2. The `analyze_morphology` function definition:
   - `def analyze_morphology(sentence):`: Defines a function named `analyze_morphology` that takes a `sentence` as input.
   - `nlp = spacy.load("en_core_web_sm")`: Loads the spaCy English language model.
   - `doc = nlp(sentence)`: Processes the input `sentence` using the spaCy pipeline.
   - `morphology_info = []`: Initializes an empty list to store morphology information for each token.
   - `for token in doc:`: Iterates over each token in the processed sentence.
   - Inside the loop, it collects various information about each token (such as text, lemma, part of speech, tag, alphabetical status, and stop word status) and appends it to the `morphology_info` list.
   - `return morphology_info`: Returns a list containing morphology information for each token in the input sentence.

3. `sentences`:
   - This is a list containing example sentences for morphology analysis.

4. Analyzing morphology for each sentence:
   - It iterates through each sentence in the `sentences` list.
   - Prints the sentence being analyzed.
   - Calls the `analyze_morphology` function for each sentence to extract morphology information.
   - Prints out the morphology information for each token in the sentence.

The code essentially demonstrates how to use spaCy to analyze the morphology of sentences by extracting various linguistic features such as lemmas, part of speech tags, and more for each token in the sentence.

import spacy

def analyze_morphology(sentence):
    nlp = spacy.load("en_core_web_sm")

    doc = nlp(sentence)

    morphology_info = []
    for token in doc:
        morphology_info.append({
            'text': token.text,
            'lemma': token.lemma_,
            'pos': token.pos_,
            'tag': token.tag_,
            'is_alpha': token.is_alpha,
            'is_stop': token.is_stop
        })

    return morphology_info

sentences = [
    "Morphology is important for word embedding.",
    "Natural language processing involves analyzing linguistic structures.",
    "The quick brown fox jumps over the lazy dog."
]

for idx, sentence in enumerate(sentences):
    print(f"\nSentence {idx + 1}: {sentence}")
    result = analyze_morphology(sentence)

    for info in result:
        print(info)

pip install python-docx

import docx
import spacy

def read_word_document(file_path):
    doc = docx.Document(file_path)
    text = []

    for paragraph in doc.paragraphs:
        text.append(paragraph.text)

    return '\n'.join(text)

def analyze_morphology(text):
    nlp = spacy.load("en_core_web_sm")

    doc = nlp(text)

    morphology_info = []
    for token in doc:
        morphology_info.append({
            'text': token.text,
            'lemma': token.lemma_,
            'pos': token.pos_,
            'tag': token.tag_,
            'is_alpha': token.is_alpha,
            'is_stop': token.is_stop
        })

    return morphology_info

word_file_path = '/content/PADDY CROP YIELD PREDICTION BASED ON SENSOR DATA AND MACHINE LEARNING.docx'  # Replace with your Word document path jiiii
document_text = read_word_document(word_file_path)
result = analyze_morphology(document_text)

for info in result:
    print(info)

